// Inicio programa Principal da CAN
//____________________________Startup____________________________________________________________________//
IF (PLC_Init) THEN
    CanInit(iENABLE := TRUE,
            iChannel := 3,
            iCAN := ADR(GVL.GtCAN3),
            iBaudrate := 250,
            iCanIdExtended := TRUE,
            iEcuCycleTime := T#10MS);
    PLC_Init := FALSE;
END_IF


// -----------------------------------------------------------------------------------
// ENVIAR FRAMES (ENTRADAS)
// -----------------------------------------------------------------------------------

// Mapeamento dos ADCs para o ID 1A02AF01

ArrayTx[0] := REAL_TO_BYTE((DWORD_TO_REAL(GVL.ADC_00.VALUE) / 20)  );		// TEMP. TANQ. RESERVATORIO 
ArrayTx[1] := REAL_TO_BYTE((DWORD_TO_REAL(GVL.ADC_01.VALUE) / 20)  ); 	// EMPERATURA DO MOTOR
ArrayTx[2] := REAL_TO_BYTE((DWORD_TO_REAL(GVL.ADC_02.VALUE) / 20)  ); 	// Freio do Caminhao ESQUERDO/Dianteiro
ArrayTx[3] := REAL_TO_BYTE((DWORD_TO_REAL(GVL.ADC_03.VALUE) / 20)  );		// Freio do Caminhao DIREITO/Traseiro
ArrayTx[4] := REAL_TO_BYTE((DWORD_TO_REAL(GVL.ADC_04.VALUE) / 20)  );		// Freio do Caminhao ESTACIONARIO
ArrayTx[5] := REAL_TO_BYTE((DWORD_TO_REAL(GVL.ADC_05.VALUE) / 20)  ); 	// Freio do PRANCHA ESQUERDO
ArrayTx[6] := REAL_TO_BYTE((DWORD_TO_REAL(GVL.ADC_06.VALUE) / 20)  ); 	// Freio do PRANCHA DIREITO
ArrayTx[7] := REAL_TO_BYTE((DWORD_TO_REAL(GVL.ADC_07.VALUE) / 20) );		// Freio do PRANCHA ESTACIONARIO
CanTx_01(iEnable:=TRUE, iCAN := ADR(GVL.GtCAN3), iForceSend := TRUE, iTransmitRate := T#50MS, iCanId := 16#1A02AF01, iCanIdExtended := TRUE, iByteCount := 8, iData := ArrayTx);

	
// Mapeamento dos ADCs para o ID 1A02AF02
// Bytes 0-1: ADC_04.VALUE | Bytes 2-3: ADC_05.VALUE | Bytes 4-5: ADC_06.VALUE | Bytes 6-7: ADC_07.VALUE
ArrayTx[0] := REAL_TO_BYTE((DWORD_TO_REAL(GVL.ADC_08.VALUE) / 20)  );		// Cilindro da Prancha Esquerdo
ArrayTx[1] := REAL_TO_BYTE((DWORD_TO_REAL(GVL.ADC_09.VALUE) / 20)  ); 	// Cilindro da Prancha Direito
ArrayTx[2] := REAL_TO_BYTE((DWORD_TO_REAL(GVL.ADC_10.VALUE) / 20)  ); 	// TRANSDUTOR DE VAZÃO
ArrayTx[3] := BOOL_TO_BYTE(GVL.DIN_00.pin_value) OR				// NIVEL OLEO 1
              SHL(BOOL_TO_BYTE(GVL.DIN_01.pin_value), 1) OR		// NIVEL OLEO 2
              SHL(BOOL_TO_BYTE(GVL.DIN_02.pin_value), 2) OR		// NIVEL OLEO 3
              SHL(BOOL_TO_BYTE(GVL.DIN_03.pin_value), 3) OR		// NIVEL OLEO 4
              SHL(BOOL_TO_BYTE(GVL.DIN_04.pin_value), 4) OR		// NIVEL OLEO 5
              SHL(BOOL_TO_BYTE(GVL.DIN_05.pin_value), 5) OR		// NIVEL OLEO 6
              SHL(BOOL_TO_BYTE(GVL.DIN_06.pin_value), 6) OR		// FILTRO SUJO 1
              SHL(BOOL_TO_BYTE(GVL.DIN_07.pin_value), 7);		// FILTRO SUJO 2 
ArrayTx[4] := BOOL_TO_BYTE(GVL.DIN_08.pin_value) OR				// FILTRO SUJO 3
			  SHL(BOOL_TO_BYTE(GVL.DIN_09.pin_value), 1) OR		// Elevador Serviço Esquerdo em Uso
              SHL(BOOL_TO_BYTE(GVL.DIN_10.pin_value), 2) OR		// Elevador Serviço Direito em Uso
              SHL(BOOL_TO_BYTE(GVL.DIN_11.pin_value), 3) OR		// Patola_Esquerda_Fora_de_Posição
              SHL(BOOL_TO_BYTE(GVL.DIN_12.pin_value), 4) OR		// Patola_Direita_Fora_de_Posição
              SHL(BOOL_TO_BYTE(0), 5) OR			
			  SHL(BOOL_TO_BYTE(0), 6) OR			
			  SHL(BOOL_TO_BYTE(0), 7); 			
ArrayTx[5] := REAL_TO_BYTE((DWORD_TO_REAL(GVL.DIN_13.value) / 20)  ); 	// Prancha_Sobe 
ArrayTx[6] := REAL_TO_BYTE((DWORD_TO_REAL(GVL.DIN_14.value) / 20)  ); 	// Prancha_Desce 
ArrayTx[7] := REAL_TO_BYTE((DWORD_TO_REAL(GVL.DIN_15.value) / 20)  ); 	// Modo TRANSLADO
CanTx_02(iEnable:=TRUE, iCAN := ADR(GVL.GtCAN3), iForceSend := TRUE, iTransmitRate := T#50MS, iCanId := 16#1A02AF02, iCanIdExtended := TRUE, iByteCount := 8, iData := ArrayTx);

// Mapeamento dos ADCs para o ID 1A02AF03
ArrayTx[0] := REAL_TO_BYTE((DWORD_TO_REAL(GVL.DIN_16.value) / 20)  );	// MODO CARGA/DESCARGA
ArrayTx[1] := 0; 	
ArrayTx[2] := 0; 
ArrayTx[3] := 0; 
ArrayTx[4] := 0; 
ArrayTx[5] := 0; 
ArrayTx[6] := 0; 
ArrayTx[7] := 0; 
CanTx_03(iEnable:=TRUE, iCAN := ADR(GVL.GtCAN3), iForceSend := TRUE, iTransmitRate := T#50MS, iCanId := 16#1A02AF03, iCanIdExtended := TRUE, iByteCount := 8, iData := ArrayTx);

